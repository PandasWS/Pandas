//===== Pandas Documentation ==============================
//= Pandas 地图标记说明文档
//===== By: ==================================================
//= Pandas 开发团队
//===== Last Updated: ========================================
//= 2019年2月11日
//===== Description: =========================================
//= 此文档对 Pandas 添加的脚本指令进行功能说明以及介绍.
//============================================================

*setheaddir <朝向编号>{,<角色编号>};

调整角色纸娃娃脑袋的朝向

朝向编号:
	0 - 使纸娃娃的脑袋看向正前方
	1 - 使纸娃娃的脑袋向右看
	2 - 使纸娃娃的脑袋向左看

角色编号:
	可选参数, 若不携带此参数则控制当前脚本关联的角色
	若填写了指定角色编号, 那么就控制指定角色

返回值:
	该指令无论执行成功与否, 都不会有返回值

---------------------------------------

*setbodydir <朝向编号>{,<角色编号>};

调整角色纸娃娃身体的朝向

朝向编号:
	与 NPC 一致, 从 0 到 7 共 8 个方位可选择

角色编号:
	可选参数, 若不携带此参数则控制当前脚本关联的角色
	若填写了指定角色编号, 那么就控制指定角色

返回值:
	该指令无论执行成功与否, 都不会有返回值

---------------------------------------

*openbank {<角色编号>};

让指定的角色立刻打开银行界面 (只对拥有随身银行的客户端版本有效).

角色编号:
	可选参数, 若不携带此参数则控制当前脚本关联的角色
	若填写了指定角色编号, 那么就控制指定角色

返回值:
	若指定角色不在线, 则返回 0, 成功则返回 1

---------------------------------------

*instance_users <副本实例编号>;

获取指定的副本实例中已经进入副本地图的人数

副本实例编号:
	必填项, 这里填写的副本编号就是 instance_create 脚本指令返回的那个数值
	也可以用 instance_id 脚本指令来获得当前队伍关联的副本实例编号

返回值:
	成功直接返回副本中的人数, 副本不存在或副本中无人存在则返回 0

---------------------------------------

*cap <要判断的数值>,<最小值>,<最大值>;
*cap_value <要判断的数值>,<最小值>,<最大值>;

确保数值不低于给定的最小值, 不超过给定的最大值

要判断的数值:
	必填项, 数值类型的值

最小值:
	必填项, 数值类型的值

最大值:
	必填项, 数值类型的值

返回值:
	要判断的数值低于最小值则直接返回最小值, 超过最大值则直接返回最大值,
	如果要判断的数值在两者之间, 那么原样返回该数值

---------------------------------------

*mobremove <魔物的GID>;

根据 GID 移除一个魔物(只是移除, 不会让魔物死亡)

魔物的GID:
	必填项, 比如使用 monster 脚本指令后 $@mobid[] 数组的内容

返回值:
	该指令无论执行成功与否, 都不会有返回值
	
---------------------------------------

*mesclear;

清空玩家与当前 NPC 的对话框内容, 清空后可以用 mes 重新给对话框填充内容

不推荐使用:
	rAthena 已经推出了功能完全一致的指令 clear;
	建议优先使用 rAthena 官方指令, 以便确保最大的脚本兼容性.
	此处的 mesclear 实际上是 clear 的别名, 以便兼容以前的部分脚本.

返回值:
	该指令无论执行成功与否, 都不会有返回值

---------------------------------------

*battleignore <开关标记>{,<角色编号>};

将指定的角色设置为魔物免战状态, 避免被魔物攻击
魔物会无视此玩家的存在, 因此不会攻击该玩家 (也可以叫无敌状态)

开关标记:
	0 - 关闭免战 (角色会被魔物看见)
	1 - 打开免战 (角色不会被魔物看见, 也不会被攻击)

返回值:
	该指令无论执行成功与否, 都不会有返回值

---------------------------------------

*getinventorylist {<角色编号>};

在 rAthena 原来返回的数组基础上, Pandas 新增了以下返回数组:

- @inventorylist_idx[] 返回每个道具的背包序号.
- @inventorylist_uid$[] 返回每个道具的唯一编号 (字符串类型的数组, 末尾记得要带 $ 符号).

背包序号:
	背包序号每一次登录、每一次玩家在自己的背包中增删物品 (包括但不限: 
	存仓、存手推车、丢弃、购买和使用道具等操作) 都可能会导致背包序号有变化.
	所以请注意在一段连续、玩家不可能会停下来做其他动作的脚本中去使用“背包序号”.
	否则, 只要在 getinventorylist 之后, 还给玩家或脚本去进行道具的增删,
	那么 @inventorylist_idx[] 中的数据将立刻变得不再可靠.

---------------------------------------

*readparam(<参数代码>{,"<角色名称>"})
*readparam(<参数代码>{,<角色编号>})

在 rAthena 原来的参数代码基础上, Pandas 新增了以下几个参数:

bAllStr - 返回角色的总 STR (用总 STR 减去 bStr 可得到面板中 STR 在加号右侧的值)
bAllAgi - 返回角色的总 AGI (用总 AGI 减去 bAgi 可得到面板中 AGI 在加号右侧的值)
bAllVit - 返回角色的总 VIT (用总 VIT 减去 bVit 可得到面板中 VIT 在加号右侧的值)
bAllInt - 返回角色的总 INT (用总 INT 减去 bInt 可得到面板中 INT 在加号右侧的值)
bAllDex - 返回角色的总 DEX (用总 DEX 减去 bDex 可得到面板中 DEX 在加号右侧的值)
bAllLuk - 返回角色的总 LUK (用总 LUK 减去 bLuk 可得到面板中 LUK 在加号右侧的值)

使用方法:
	dispbottom "总STR为 : " + readparam(bAllStr) + " (" + readparam(bStr) + " + " + (readparam(bAllStr) - readparam(bStr)) + ")";

---------------------------------------

*gethotkey <快捷键位置编号>{,<要获取的数据类型>};
*get_hotkey <快捷键位置编号>{,<要获取的数据类型>};

获取指定快捷键位置的信息, 快捷键位置编号必须大于 0 小于 MAX_HOTKEYS.
MAX_HOTKEYS 是个常量, 在脚本中可以直接使用以下方法来确认它的值:

	dispbottom "MAX_HOTKEYS = " + MAX_HOTKEYS;

要获取的数据类型:
	可选参数, 若携带这个参数则函数的返回值会具备不同含义:
	0	- 获取快捷键的类型
		> 若返回 0 表示该位置的快捷键上放的是一个物品
		> 若返回 1 表示该位置的快捷键上放的是一个技能
	1	- 获取技能编号或物品编号
	2	- 获取登记在快捷键上的技能等级

	若不携带 <要获取的数据类型> 参数, 那么指定的快捷键的信息会被存放到以下角色变量:
	
	@hotkey_type	- 快捷键的类型 (为 0 表示物品, 为 1 表示技能)
	@hotkey_id		- 技能编号或物品编号
	@hotkey_lv		- 登记在快捷键上的技能等级

返回值:
	若携带 <要获取的数据类型> 参数时, 发生错误将返回 -1, 成功则返回查询的值;
	不携带 <要获取的数据类型> 参数时, 发生错误将返回 -1, 成功则将信息保存到变量并返回 1

---------------------------------------

*sethotkey <快捷键位置编号>,<快捷键的类型>,<物品编号/技能编号>,<技能等级>;
*set_hotkey <快捷键位置编号>,<快捷键的类型>,<物品编号/技能编号>,<技能等级>;

设置玩家快捷键工具栏上的内容, 快捷键位置编号必须大于 0 小于 MAX_HOTKEYS.
MAX_HOTKEYS 是个常量, 在脚本中可以直接使用以下方法来确认它的值:

	dispbottom "MAX_HOTKEYS = " + MAX_HOTKEYS;

快捷键的类型:
	0	- 这个快捷键想放置一个物品 (若使用该值, 则"技能等级"参数无意义, 请直接给"技能等级"参数传 0 即可)
	1	- 这个快捷键想放置一个技能

物品编号/技能编号:
	根据您 <快捷键的类型> 的取值不同而拥有不同含义, 程序会校验给定的物品编号或技能编号是否有效.

技能等级:
	只有当 <快捷键的类型> 的值为 1 时才有意义. 若是个物品的话, 这里随便传什么都会被默认为 0.

返回值:
	设置成功则返回 1, 设置失败则返回 0

---------------------------------------

*showvend "<NPC名称>",<是否显示>{,"<招牌名称>"};

使指定的 NPC 头上可以显示露天商店的招牌, 点击招牌可触发与 NPC 的对话.

NPC名称:
	你可以指定 NPC 的名称, 或者用 strnpcinfo(0) 获取当前 NPC 的名称.

是否显示:
	0 - 隐藏招牌 (当选择隐藏招牌时, <招牌名称> 参数可不传递)
	1 - 显示招牌

返回值:
	操作成功则返回 1, 操作失败则返回 0

---------------------------------------

*viewequip <目标的角色编号>{,<是否强制查看>};

查看指定在线角色的装备面板信息.

是否强制查看:
	0	- 若目标角色禁止其他玩家查看装备, 那么就不查看 (对 GM 无影响)
	1	- 无视目标角色设置, 强制进行查看

注意事项:
	在 Pandas v2.0.0 以前的版本中, 第一个参数提供的是账号编号而不是角色编号.
	现在统一改成角色编号, 请留意对相关的脚本进行升级调整.

返回值:
	操作成功则返回 1, 操作失败则返回 0

---------------------------------------

*countitemidx <背包序号>{,<角色编号>};
*countinventory <背包序号>{,<角色编号>};

获取指定背包序号的道具在背包中的数量. 

背包序号:
	可以通过 getinventorylist 脚本指令的 @inventorylist_idx[] 数组来获得.

返回值:
	操作成功则返回道具的数量, 操作失败则返回 0

---------------------------------------

*delitemidx <背包序号>{,<移除的数量>{,<角色编号>}};
*delinventory <背包序号>{,<移除的数量>{,<角色编号>}};

移除指定背包序号的道具, 支持指定移除数量以及目标角色编号. 
若被指定的道具已穿戴在目标角色身上, 那么该装备会被立刻脱下并移除.

背包序号:
	可以通过 getinventorylist 脚本指令的 @inventorylist_idx[] 数组来获得.

移除的数量:
	可选参数, 若不指定, 则表示你想删除指定道具的全部.

返回值:
	操作成功则返回 1, 操作失败则返回 0

---------------------------------------

*identifyidx <背包序号>{,<角色编号>};
*identifybyidx <背包序号>{,<角色编号>};

鉴定指定背包序号的道具.
只要背包序号合法, 哪怕道具已经被鉴定过, 该函数也会返回 1.

背包序号:
	可以通过 getinventorylist 脚本指令的 @inventorylist_idx[] 数组来获得.

返回值:
	操作成功则返回 1, 操作失败则返回 0

---------------------------------------

*unequipidx <背包序号>{,<角色编号>};
*unequipinventory <背包序号>{,<角色编号>};

脱下指定背包序号的道具.
只要背包序号合法, 哪怕道具已被脱下, 该函数也会返回 1.
若指定的道具不是装备, 那么该函数将返回 0 (但不会报错, 也不会警告).

背包序号:
	可以通过 getinventorylist 脚本指令的 @inventorylist_idx[] 数组来获得.

返回值:
	操作成功则返回 1, 操作失败则返回 0

---------------------------------------

*equipidx <背包序号>{,<角色编号>};
*equipinventory <背包序号>{,<角色编号>};

穿戴指定背包序号的道具.
只要背包序号合法, 哪怕道具已被穿戴, 该函数也会返回 1.
若指定的道具不是装备, 那么该函数将返回 0 (但不会报错, 也不会警告).

背包序号:
	可以通过 getinventorylist 脚本指令的 @inventorylist_idx[] 数组来获得.

返回值:
	操作成功则返回 1, 操作失败则返回 0


---------------------------------------

*itemexists <物品编号/"物品名称">;
*existitem <物品编号/"物品名称">;

确认物品数据库中是否存在指定物品, 通常用于提高脚本的健壮性.

参数说明:
	第一参数是必填的多类型参数. 可以填写数值类型的道具编号, 或者字符串类型的道具名称.
	推荐使用道具编号, 相较而言结果会更加准确.

注意事项:
	第一个参数避免填写[字符串类型]的道具编号, 
	因为这里的参数只要是字符串类型的, 都会走物品名称判断逻辑.

返回值:
	若物品指定的道具编号不存在于数据库中则返回 0,
	若物品存在且[可堆叠]则返回[正数]物品编号, [不可堆叠]则返回[负数]物品编号

---------------------------------------

*renttime <EQI装备位置>,<增减的时间秒数>{,<角色编号>};
*setrenttime <EQI装备位置>,<增减的时间秒数>{,<角色编号>};
*resume <EQI装备位置>,<增减的时间秒数>{,<角色编号>};

增加/减少指定位置装备的租赁时间.
如果要减少租赁时间的话, 第二个参数请使用负数.

EQI装备位置:
	是指 EQI_* 开头的位置常量, 可参考 doc/script_commands.txt

增减的时间秒数:
	若需要减少时间的话, 请使用负数.

注意事项:
	input 指令会将所有小于 0 的用户输入数值变成 0.
	若您希望由玩家通过 input 指令来指定要减少的秒数, 那么需要加个负数符号.
	或者修改 conf/script_athena.conf 中 input_min_value 选项的值.

返回值:
	操作失败返回 0, 非 0 的正数表示成功增减后新的剩余时间秒数
	若指定位置没有穿戴装备, 或指定位置的装备并非租赁道具, 函数都会返回 0

---------------------------------------

*getequipidx <EQI装备位置>{,<角色编号>};

获取指定位置装备的背包序号. 注意该函数返回 0 不代表失败.

EQI装备位置:
	是指 EQI_* 开头的位置常量, 可参考 doc/script_commands.txt

返回值:
	-1 - 在指定的EQI装备位置找不到装备
	-2 - 填写的EQI装备位置无效
	-3 - 指定的角色编号无效, 或者目标玩家不在线
	其他大于等于 0 的数值则表示成功, 返回值就是所查位置装备的背包序号

---------------------------------------

*statuscalc;
*status_calc;

根据角色目前的装备、技能、状态以及其他各种加成, 重新执行计算玩家的能力.

不推荐使用:
	rAthena 已经推出了功能完全一致的指令 recalculatestat;
	建议优先使用 rAthena 官方指令, 以便确保最大的脚本兼容性.
	此处的 statuscalc 和 status_calc 实际上是 recalculatestat 的别名, 以便兼容以前的部分脚本.

返回值:
	该指令无论执行成功与否, 都不会有返回值

---------------------------------------

*getequipexpiretick <EQI装备位置>{,<角色编号>};
*isrental <EQI装备位置>{,<角色编号>};

获取指定位置装备的租赁到期剩余秒数.

EQI装备位置:
	是指 EQI_* 开头的位置常量, 可参考 doc/script_commands.txt

返回值:
	-1 - 在指定的EQI装备位置找不到装备
	-2 - 填写的EQI装备位置无效
	-3 - 指定的角色编号无效, 或者目标玩家不在线
	 0 - 此装备不是租赁装备, 永久有效
	其他大于 0 的数值则代表租赁到期的剩余秒数

---------------------------------------

*getinventoryinfo <背包序号>,<要查看的信息类型>{,<角色编号>};

查询指定背包序号的道具的详细信息.

背包序号:
	可以通过 getinventorylist 脚本指令的 @inventorylist_idx[] 数组来获得.

要查看的信息类型:
	0 	- 物品编号
	1 	- 堆叠数量
	2 	- 装备的穿戴位置 (如果为 0 则表示还没穿戴在身上, 位置请参考 EQP_* 开头的常量)
	3 	- 精炼值
	4 	- 是否已鉴定 (1为已鉴定, 0为未鉴定)
	5 	- 属性 (说是属性, 其实最常用是用来判断物品是否损坏, 若损坏则返回1, 没坏则返回 0)
	6 	- 第一个卡槽的卡片编号
	7 	- 第二个卡槽的卡片编号
	8 	- 第三个卡槽的卡片编号
	9 	- 第四个卡槽的卡片编号
	10	- 过期时间 (Unix时间戳, 0 表示永不过期)
	11	- 装备的唯一编号(unique_id) - 注意: 返回字符串类型的变量

注意事项:
	用来存放装备唯一编号的返回值必须是一个字符串类型的变量 (即: 变量结尾带$符号).
	如果用来存放返回值的变量是数值类型的话, 那么拿到的值不是装备的唯一编号, 且是不可预期的.

	.@uid$ = getinventoryinfo(背包序号, 11);	// 正确, 接收变量带 $ 符号结尾
	.@uid = getinventoryinfo(背包序号, 11);		// 错误

返回值:
	获取失败则返回 -1, 获取成功则返回你所查询的信息

---------------------------------------

*statuscheck <状态编号>{,<游戏单位编号>};
*sc_check <状态编号>{,<游戏单位编号>};

该指令用于判断状态是否存在, 并取得相关的状态参数.

不推荐使用:
	rAthena 已经推出了功能近似的指令 getstatus;
	建议优先使用 rAthena 官方指令, 以便确保最大的脚本兼容性.

状态编号:
	每一个增益或者减益状态都有一个编号, 脚本中一般用常量表示.
	比如负重超过 50% 的状态编号是: SC_WEIGHT50
	这部分的常量定义可以在: src/map/status.hpp 中的 sc_type 定义中找到.

游戏单位编号:
	这个编号有不同的叫法: GameID, GID, MapID, 每一个游戏中的对象
	只要会显示在地图上的, 就会有一个自己的 <游戏单位编号>
	普通游戏玩家进入游戏后, 它的 <账号编号> 就是他角色的 <游戏单位编号>

信息通过变量返回:
	当返回值为 1 的时候, 可以通过以下变量来读取状态的参数:

	@sc_val1		状态的第 1 个参数值 (如果是技能对应的状态的话, 往往这个参数都是技能等级)
	@sc_val2		状态的第 2 个参数值
	@sc_val3		状态的第 3 个参数值
	@sc_val4		状态的第 4 个参数值
	@sc_tickleft	状态的剩余时间 (单位为毫秒)

注意事项:
	若指定状态的剩余时间过长, @sc_tickleft 的返回值会变得不可靠.
	可保存的最大值为 2147483647 毫秒, 约等于 2147484 秒, 24.86 天.
	若状态的有效剩余时间大于这个值, 那么 @sc_tickleft 就容纳不下了.
	
	若您预判可能存在此问题, 那么还是推荐用 getstatus 来替代,
	因为 getstatus 获取信息的方式是通过指令返回值, 它可以保存更大的数值.

返回值:
	获取成功则返回 1, 角色没有该状态则返回 0, 其他错误返回 -1

---------------------------------------

*renttimeidx <背包序号>,<增减的时间秒数>{,<角色编号>};

增加/减少指定背包序号道具的租赁时间.
如果要减少租赁时间的话, 第二个参数请使用负数.

该指令与 renttime 近似, 只是 renttime 操作的是某个已穿戴的装备,
而 renttimeidx 指令可以通过背包序号来指定要调整的物品.

背包序号:
	可以通过 getinventorylist 脚本指令的 @inventorylist_idx[] 数组来获得.

增减的时间秒数:
	若需要减少时间的话, 请使用负数.

注意事项:
	input 指令会将所有小于 0 的用户输入数值变成 0.
	若您希望由玩家通过 input 指令来指定要减少的秒数, 那么需要加个负数符号.
	或者修改 conf/script_athena.conf 中 input_min_value 选项的值.

返回值:
	操作失败返回 0, 非 0 的正数表示成功增减后新的剩余时间秒数
	若指定位置没有穿戴装备, 或指定位置的装备并非租赁道具, 函数都会返回 0

---------------------------------------

*party_leave {<角色编号>};

使当前角色或指定角色退出队伍.

不推荐使用:
	rAthena 已经推出了功能近似的指令 party_delmember;
	建议优先使用 rAthena 官方指令, 以便确保最大的脚本兼容性.

角色编号:
	若不指定角色编号, 那么将会使执行该指令的玩家退出队伍.

返回值:
	若指定的角色不在线或不在队伍中则返回 0,
	若角色成功退出队伍则返回 1

---------------------------------------

*script4each <"{脚本}">,<脚本的执行范围>{,<动态参数>...};

对指定范围的玩家执行相同的一段脚本, 执行 <脚本> 的玩家将会成为其默认关联玩家.

全服玩家							- script4each "{<脚本>}",0;
指定地图上的全部玩家				- script4each "{<脚本>}",1,<"地图名称">;
以地图某个点为中心半径距离内的玩家	- script4each "{<脚本>}",2,<"地图名称">,<中心坐标x>,<中心坐标y>,<范围>;
指定玩家所在的队伍中的全部队伍成员	- script4each "{<脚本>}",3,<角色编号>;
指定玩家所在的公会中的全部公会成员	- script4each "{<脚本>}",4,<角色编号>;
指定区域内的全部玩家				- script4each "{<脚本>}",5,<"地图名称">,<坐标x0>,<坐标y0>,<坐标x1>,<坐标y1>;
指定队伍中的全部队伍成员			- script4each "{<脚本>}",6,<队伍编号>;
指定公会中的全部公会成员			- script4each "{<脚本>}",7,<公会编号>;

大括号转义: 
	如果 <脚本> 中有使用到大括号的话, 需要在大括号的左侧使用 \ 来进行转义,
	例如我们希望执行这样一段脚本: if (BaseLevel >= 10) { getitem 501, 10;}
	在使用 script4each 来执行的时候, 脚本代码需要被套在 "{ ... }" 中执行,
	所以除了靠近前后双引号的 { 或 } 之外, 内部的全部大括号都需要加 \ 来转义,
	比如 { 应该写成 \{ 而 } 应该写成 \} 最后的表达方法如下:
	script4each "{ if (BaseLevel >= 10) \{ getitem 501, 10;\} }",0;

返回值:
	该指令无论成功失败, 都不会有返回值

---------------------------------------

*searcharray <数组变量>,<要查找的字符串或数值>;

查询数组中第一次出现待查询内容的索引序号, 使用它来搜索数组内容很方便.

不推荐使用:
	rAthena 已经推出了功能近似的指令 inarray;
	建议优先使用 rAthena 官方指令, 以便确保最大的脚本兼容性.

返回值:
	若查不到结果则返回 -1, 否则返回大于等于 0 的索引序号

---------------------------------------

*getsameipinfo {<"IP地址">};

获得某个指定 IP 在线的玩家信息.
若不携带<"IP地址">参数, 则默认查询当前脚本关联角色的 IP 地址.

IP地址:
	可选参数, 若需要指定的话请填写标准的 4 段式 IP 地址,
	例如: getsameipinfo "114.114.114.114"

信息通过变量返回:

	@sameip_aid[]		该 IP 在线的玩家账号编号数组 - 数值型数组
	@sameip_cid[]		该 IP 在线的玩家角色编号数组 - 数值型数组
	@sameip_name$[]		该 IP 在线的玩家角色名称数组 - 字符型数组

返回值及 @sameip_amount 变量都会赋予目前使用指定IP登录的玩家个数.

提示信息:
	官方自带的 getcharip 脚本指令可以获得某个玩家的 IP 地址,
	配合这个指令, 就能知道对方相同 IP 下有几个角色在线.

返回值:
	出错返回 -1, 其他含 0 正整数表示查到的此 IP 的在线玩家数
