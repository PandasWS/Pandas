//===== Pandas Documentation =================================
//= 事件标签说明文档
//===== By: ==================================================
//= 熊猫模拟器开发团队
//===== Current Version: =====================================
//= 1.1
//===== Description: =========================================
//= 此文档对熊猫模拟器添加的自定义事件标签进行了说明, 包括这些
//= 事件的触发时机、关联玩家、可能的返回参数等.
//============================================================

事件名称约定:
	On[事件关联到的对象][事件名称][事件类型]

事件关联到的对象:
	是指到时候事件被触发时脚本会关联到哪个对象上执行:
	- PC		表示玩家(最常见)

事件名称:
	只事件的名字, 通常只是起到区分作用

事件类型:
	- Event		常规事件, 阻塞将进入事件队列, 不可打断
	- Filter	过滤事件, 立即执行, 可被打断
	- Express	实时事件, 立即执行, 不可打断

//============================================================
// 改进 rAthena 官方事件
//============================================================

*OnPCStatCalcEvent:

当角色能力被重新计算时触发事件, 例如: 变更角色的六维素质点, 穿戴或脱下装备,
改变角色当前所在地图, 登入游戏, 基础或职业等级变化等等.

常规用法:
	可以在这个事件的触发代码中, 编写一些装备常用的脚本.
	例如: 当基础等级被 10 整除的时候, 六维属性全部增加当前等级 / 10 的整数
	
	if (BaseLevel % 10 == 0) {
		bonus bAllStats, BaseLevel / 10;
	}

实时事件:
	此事件在熊猫模拟器中被改造成了"实时事件",
	实时事件的执行不会被放入事件队列, 只要被触发都能被立刻执行.

	部分特殊的脚本指令, 不能在实时事件的处理脚本中运行:
	mes, next, close, close2, menu, select, prompt, input,
	openstorage, guildopenstorage, produce, cooking, birthpet,
	callshop, sleep, sleep2, openmail, openauction, progressbar,
	buyingstore, makerune, opendressroom, openstorage2
	
	若您知道可能潜在的副作用且坚持需要使用上述任何一个指令,
	可以使用 'unlockcmd' 脚本指令来解锁限制.

---------------------------------------

*OnSellItem:

当某个 NPC 使用 callshop 指令打开商店, 且玩家在商店里面出售自己的道具时, 
此 NPC 的 OnSellItem 标签(存在时)将会被触发.

携带参数:
	除了 rAthena 自带的参数外, Pandas 拓展了以下数组:
	@sold_idx[]		用于保存被出售的物品在玩家身上的背包序号

注意事项:
	- 此事件为 rAthena 官方事件, 具体用法请参考 doc/script_commands.txt

//============================================================
// 常规事件 (AKA: 普通事件)
//============================================================
// 执行常规事件的时候若当前玩家正在与 NPC 对话,
// 那么本次事件将会压入事件队列暂缓执行,
// 直到玩家与 NPC 的对话完结之后才会挨个顺序触发.
//
// 整个 rAthena 官方自带的事件都属于这一类. 事件队列容量有限,
// 若队列满了那么后来的事件将被抛弃.
//============================================================

*OnPCIdentifyEvent:

当玩家成功鉴定了装备时触发事件

事件关联:
	关联到发起鉴定的玩家

中断关联:
	若玩家鉴定装备时在 OnPCIdentifyFilter 事件中使用了 processhalt
	指令打断了后续流程, 那么此事件将不会被触发.

携带参数:
	@identify_idx	已被玩家成功鉴定的道具背包序号

---------------------------------------

*OnPCInsertCardEvent:

当玩家成功插入卡片后触发事件

事件关联:
	关联到刚刚完成插卡的玩家

携带参数:
	@insert_equip_idx	刚刚成功插卡的装备背包序号
	@insert_card_idx	刚刚被插卡消耗掉的卡片背包序号 (注意: 此时的卡片已被删除)
	@insert_card_id		刚刚被插入的卡片物品编号
	@insert_card_slot	刚刚被插入卡片的卡槽编号 ( 0 - 第一个卡槽; 3 - 第四个卡槽 )

注意事项:
	此事件只有成功完成插卡后才会被触发, 插卡失败是不会触发的
	不过插卡失败的情况一般几乎不可能发生, 可以安心使用
	
	@insert_card_idx 参数指向的背包序号在极端情况下将不可信

---------------------------------------

*OnPCUseItemEvent:

当玩家成功使用非装备类道具后触发事件

事件关联:
	关联到成功使用了道具的玩家

携带参数:
	@useitem_idx	刚刚被使用的道具背包序号 (注意: 此时的道具可能已被消耗)
	@useitem_nameid	刚刚被使用的道具编号

注意事项:
	@useitem_idx 参数指向的背包序号在极端情况下将不可信
	本事件与 rAthenaCN 老版本的同名事件含义不同, 请脚本编写人员留意

---------------------------------------

*OnPCUseSkillEvent:

当玩家成功使用技能后触发事件

事件关联:
	关联到成功使用了技能的玩家

携带参数:
	@useskill_id			刚刚施放的技能编号
	@useskill_lv			刚刚施放的技能等级
	@useskill_target_gid	被施法目标的 GameID, 若为 0 则表示这是个地面技能
	@useskill_pos_x			刚刚被施法的地面 X 坐标
	@useskill_pos_y			刚刚被施法的地面 Y 坐标

注意事项:
	模拟器内部的技能实现流程比较长, 手动测试无法覆盖全部分支.
	若您发现自己关心的某个技能使用后该事件没被触发的话,
	可以前往 https://github.com/PandasWS/Pandas 提交 Issue 进行反馈.

---------------------------------------

*OnPCProgressAbortEvent:

当玩家的进度条被打断后触发事件

事件关联:
	关联到进度条被打断的玩家

注意事项:
	- 该事件默认不会触发, 您需要使用 settrigger 脚本指令设置一下
	- 关于 settrigger 脚本指令的用法请查阅 doc/pandas_script_commands.txt

---------------------------------------

*OnPCKillMvpEvent:

当玩家杀死 MVP 魔物后触发事件

事件关联:
	关联到给予 MVP 魔物最后一击的玩家

携带参数:
	killedrid			被杀魔物的类型编号 (魔物编号)
	killedgid			被杀魔物的游戏单位编号 (GameID)
	
	@mob_dead_x			魔物死亡时所处的 X 坐标
	@mob_dead_y			魔物死亡时所处的 Y 坐标
	@mob_rebirth		魔物是否已经重生过一次 (0 = 否; 1 = 是)
	@mob_lasthit_rid	给予魔物最后一击的角色的游戏单位编号 (GameID)
	@mob_lasthit_cid	给予魔物最后一击的角色编号
	@mob_mvp_rid		本次 MVP 角色的游戏单位编号 (GameID)
	@mob_mvp_cid		本次 MVP 角色的角色编号

修订记录:
	v1.1.1	- 增加 killedgid 和 @mob_rebirth 携带参数

---------------------------------------

*OnPCEquipEvent:

当玩家成功穿戴一件装备时触发事件
当玩家执行"装备切换"将"待用装备"转正为"生效装备"成功后也会触发事件

事件关联:
	关联到穿戴装备的玩家

携带参数:
	@equip_idx		玩家穿戴的装备背包序号
	@equip_swapping	本次穿戴是否由于"装备切换"而触发的

装备切换:
	新的仙境传说客户端支持"装备切换"机制,
	此时如果单独将装备拖动到装备面板的"待切换装备"窗口中进行登记,
	不会触发此事件 (因为此时装备并未实际穿戴).

---------------------------------------

*OnPCUnequipEvent:

当玩家成功脱下一件装备时触发事件
用一个新装备去替换位置相同且已穿戴的"生效装备", 导致它被成功脱下时也会触发过滤器

事件关联:
	关联到脱下装备的玩家

携带参数:
	@unequip_idx		玩家成功脱下的装备背包序号
	@unequip_swapping	本次脱下是否由于"装备切换"而触发的
	@unequip_force		本次脱下是否由某个需要强制脱下的内部逻辑产生的

装备切换:
	新的仙境传说客户端支持"装备切换"机制,
	此时如果单独将装备从到装备面板的"待用装备"窗口中拖离移除,
	不会触发此过滤器 (因为此时装备并未实际脱下).

强制脱下说明:
	- 角色转职的时候, 若穿戴的装备已经不符合新职业的要求, 那么装备将被强制脱下.
	- 当精炼道具时, 已经装备就会被强制脱下, 以便进行精炼.
	- @dropall @storeall @changesex @changecharsex @fullstrip 等指令也会触发装备的强制脱下.

注意事项:
	当 @unequip_swapping 为 1 时, "生效装备"实际上只是和"待用装备"
	进行了交换, 并未直接脱下到背包中.

	替换位置相同的"生效装备"时, 参数 @unequip_swapping 的值为 0.

千万注意:
	当程序内部逻辑需要强制脱下某件装备时, @unequip_force 将为 1,
	当它为 1 的时候请不要使用 processhalt 打断后续流程, 或删除即将被操作的装备.
	因为这可能引发各种奇怪的问题.
	
	比如: 当替换装备的时候相同位置的老装备应该被强制脱下, 
	如果此时打断后续流程, 那么新穿戴的装备虽然可以成功穿戴,
	但是老的装备的"脱下脚本"就不会被触发.

//============================================================
// 熊猫模拟器 - 过滤事件 (过滤器事件)
//============================================================
// 过滤事件通常在服务器一些关键的节点触发,
// 可以用 processhalt 脚本指令打断, 打断后将影响后续工作流.
// 
// 从 v1.1.1 版本开始:
// ---------------------------------------
// 过滤事件一旦触发会被立刻执行! 哪怕玩家正在和 NPC 对话,
// 也不会被压入事件队列暂缓执行.
// 
// 过滤事件默认禁止使用[需要等待玩家进行后续动作]的指令:
// mes, next, close, close2, menu, select, prompt, input,
// openstorage, guildopenstorage, produce, cooking, birthpet,
// callshop, sleep, sleep2, openmail, openauction, progressbar,
// buyingstore, makerune, opendressroom, openstorage2
//
// 若您知道可能潜在的副作用且坚持需要使用上述任何一个指令,
// 可以使用 'unlockcmd' 脚本指令来解锁限制.
// 
// 任何过滤事件触发时都将自动携带 @interrupt_npcid 参数,
// 作者可以通过 @interrupt_npcid 参数来获取当前过滤事件触发时
// 玩家正在与哪个 NPC 对话 (游戏单位编号).
// 值为 0 表示没有打断玩家, 那你可以随意使用 mes 等指令.
//============================================================

*OnPCIdentifyFilter:

当玩家在装备鉴定列表中选择好装备, 并点击"确定"按钮时触发过滤器

事件关联:
	关联到发起鉴定的玩家

中断说明: 
	中断后会无视玩家本次鉴定道具的请求, 系统不再鉴定此装备

携带参数:
	@identify_idx	被玩家选择进行鉴定的道具背包序号

---------------------------------------

*OnPCInChatroomFilter:

当玩家双击进入 NPC 开启的聊天室时将触发过滤器

事件关联:
	关联到进入聊天室的玩家

中断关联:
	中断后客户端将不会打开聊天室窗口
	
注意事项:
	只会触发建立聊天室的 NPC 名下的过滤器事件,
	其他 NPC 使用的 OnPCInChatroomFilter 过滤器不会被触发
	
	此外需要注意的是 rAthena 自带的 waitingroom 指令有一个 "<event label>" 事件,
	当聊天室中的成员数量足够时就会被触发. 若您在本过滤器中使用 processhalt
	指令打断了后续流程, 那么 waitingroom 的事件将不会被触发.

---------------------------------------

*OnPCInsertCardFilter:

当玩家准备插入卡片时触发过滤器

事件关联:
	关联到准备插卡的玩家

中断关联:
	中断后服务端会无视玩家本次插入卡片的操作

携带参数:
	@insert_equip_idx	即将被插卡的装备背包序号
	@insert_card_idx	即将被插入的卡片背包序号
	@insert_card_id		即将被插入的卡片物品编号
	@insert_card_slot	即将被插入卡片的卡槽编号 ( 0 - 第一个卡槽; 3 - 第四个卡槽 )

---------------------------------------

*OnPCUseItemFilter:

当玩家准备使用非装备类道具时触发过滤器

事件关联:
	关联到准备使用道具的玩家

中断关联:
	中断后服务端会无视玩家本次使用道具的操作

携带参数:
	@useitem_idx	即将被使用的道具背包序号
	@useitem_nameid	即将被使用的道具编号

---------------------------------------

*OnPCUseSkillFilter:

当玩家准备使用技能时触发过滤器

事件关联:
	关联到准备使用技能的玩家

中断说明:
	中断后服务端会无视玩家本次使用技能的请求

携带参数:
	@useskill_id			即将施放的技能编号
	@useskill_lv			即将施放的技能等级
	@useskill_target_gid	被施法目标的 GameID, 若为 0 则表示这是个地面技能
	@useskill_pos_x			即将被施法的地面 X 坐标
	@useskill_pos_y			即将被施法的地面 Y 坐标

注意事项:
	为了方便利用事件实现一些技能, 本过滤器的触发时机非常早,
	就算玩家被 setpcblock 设置为禁用技能, 此过滤器也能够被触发.
	
	此过滤器触发时, 技能咏唱及施法条件判断、材料扣除等尚未发生.

---------------------------------------

*OnPCOpenRouletteFilter:

当玩家准备打开乐透大转盘的时候触发过滤器

事件关联:
	关联到准备打开乐透大转盘的玩家

中断说明:
	中断后服务端会无视本次打开乐透大转盘的请求

注意事项:
	该过滤器的触发必须依赖一些条件, 若条件不匹配则不会被触发:
	- 客户端必须是 2014-10-22 或更新的版本
	- 若当前正在与 NPC 进行对话, 那么此过滤器将不会被触发
	
	为了进一步优化体验, Pandas 对大乐透按钮的点击逻辑进行了调整:
	正在和 NPC 对话时将禁止点击大乐透按钮按钮 (与 rAthena 有所不同)

---------------------------------------

*OnPCViewEquipFilter:

当玩家准备查看某个角色的装备时触发过滤器

事件关联:
	关联到发起查看请求的玩家

中断说明:
	中断后服务端会无视本次查看他人装备的请求

携带参数:
	@view_equip_target_name$	被查看角色的角色名
	@view_equip_target_cid		被查看角色的角色编号
	@view_equip_target_aid		被查看角色的账号编号

注意事项:
	- 使用 viewequip 脚本指令也会触发此过滤器
	- 必须是对方角色公开装备且查看者也有权查看的情况下, 才会触发此过滤器

---------------------------------------

*OnPCEquipFilter:

当玩家准备穿戴装备时触发过滤器
当玩家执行"装备切换"将"待用装备"转正为"生效装备"时也会触发过滤器

事件关联:
	关联到即将穿戴装备的玩家

中断说明:
	中断后服务端会无视玩家本次穿戴操作
	若 @equip_swapping 为 1 时, 使用 processhalt 是无效的

携带参数:
	@equip_idx		玩家即将穿戴的装备背包序号
	@equip_swapping	本次穿戴是否由于"装备切换"而触发的

装备切换:
	新的仙境传说客户端支持"装备切换"机制,
	此时如果单独将装备拖动到装备面板的"待用装备"窗口中进行登记,
	不会触发此过滤器 (因为此时装备并未实际穿戴).

注意事项:
	若玩家身上已穿戴一件相同位置的装备,
	那么过滤器被触发时用 processhalt 打断了穿戴本装备的后续过程,
	角色身上的原穿戴的装备也不会被脱下.

	当玩家穿戴一件未被绑定的装备, 并在客户端中确认执行绑定后,
	在过滤器中用 processhalt 打断后续过程, 装备也将维持最初的未绑定状态.

	执行该过滤器时, 装备实际上还未穿戴上, 因此在该事件的触发脚本中使用
	getinventoryinfo(@equip_idx, 2) 尝试获取该装备的穿戴位置时获取的值永为 0

---------------------------------------

*OnPCUnequipFilter:

当玩家准备脱下装备时触发过滤器
用一个新装备去替换位置相同且已穿戴的"生效装备"时也会触发过滤器

事件关联:
	关联到即将脱下装备的玩家

中断关联:
	中断后服务端会无视玩家本次脱下操作
	若 @unequip_swapping 为 1 时, 使用 processhalt 是无效的

携带参数:
	@unequip_idx		玩家即将脱下的装备背包序号
	@unequip_swapping	本次脱下是否由于"装备切换"而触发的
	@unequip_force		本次脱下是否由某个需要强制脱下的内部逻辑产生的

装备切换:
	新的仙境传说客户端支持"装备切换"机制,
	此时如果单独将装备从到装备面板的"待用装备"窗口中拖离移除,
	不会触发此过滤器 (因为此时装备并未实际脱下).

强制脱下说明:
	- 角色转职的时候, 若穿戴的装备已经不符合新职业的要求, 那么装备将被强制脱下.
	- 当精炼道具时, 已经装备就会被强制脱下, 以便进行精炼.
	- @dropall @storeall @changesex @changecharsex @fullstrip 等指令也会触发装备的强制脱下.

注意事项:
	当 @unequip_swapping 为 1 时, "生效装备"实际上只是和"待用装备"
	进行了交换, 并未直接脱下到背包中.

	替换位置相同的"生效装备"时, 参数 @unequip_swapping 的值为 0.

	执行该过滤器时, 装备实际上还未脱下, 因此在该事件的触发脚本中使用
	getinventoryinfo(@equip_idx, 2) 尝试获取该装备的穿戴位置时获取的值通常不是 0

千万注意:
	当程序内部逻辑需要强制脱下某件装备时, @unequip_force 将为 1,
	当它为 1 的时候请不要使用 processhalt 打断后续流程, 或删除即将被操作的装备.
	因为这可能引发各种奇怪的问题.
	
	比如: 当替换装备的时候相同位置的老装备应该被强制脱下, 
	如果此时打断后续流程, 那么新穿戴的装备虽然可以成功穿戴,
	但是老的装备的"脱下脚本"就不会被触发.

---------------------------------------

*OnPCChangeTitleFilter:

事件描述: 
	当玩家即将变更称号时将触发此过滤器
	
事件关联:
	关联到称号变更的玩家

中断说明:
	中断后服务端会无视玩家本次修改称号的操作,
	也不会根据 @target_title_id 变量的值来设定玩家的称号
	
	鉴于 @target_title_id 是可被修改的
	所以你可以用直接修改 @target_title_id 的方式来篡改最终的称号ID
	但是要注意, 采用这种方法的话, 后面别跟 processhalt;

携带参数:
	@trigger_mode
		0 - 通过装备面板触发
		1 - 通过 setchartitle 脚本指令触发
		2 - 通过 @title 管理员指令触发

	@target_title_id	即将变更成的目标称号ID (该值可被修改)
	@pre_title_id	之前的称号ID是多少

注意事项:
	当 @trigger_mode 为 0 时, 若 @target_title_id 参数的值也为 0,
	则表示玩家双击了 "Title Release" (或翻译成"Disable Title")

兼容提醒:
	此过滤器的一些细节与 rAthenaCN v1.8.0 版本存在差异, 可能会有不兼容情况
	请酌情修改之前的老脚本, 以便使脚本可以正常工作.

	- 取消了事件别名: OnPCChangeTitleEvent
	- @new_title_id 改名为 @target_title_id (@new_title_id 将不再被赋值)

---------------------------------------

*OnPCBuffStartFilter:

事件描述: 
	当玩家即将获得一个状态(Buff)时触发此过滤器
	
事件关联:
	关联到即将获得状态的玩家

中断说明:
	中断后服务端会无视玩家本次获得状态的请求

携带参数:
	@about2start_sc_id		该状态的编号
	@about2start_sc_rate	该状态的触发概率(10000 = 100%, 该值可被修改)
	@about2start_sc_tick	该状态的持续时长(单位为毫秒, 该值可被修改)
							时长根据内部实现方式的不同, 有可能是指多长时间后剩余秒数减一
	@about2start_sc_val1	该状态的第1个参数的值 (该值可被修改)
	@about2start_sc_val2	该状态的第2个参数的值 (该值可被修改)
	@about2start_sc_val3	该状态的第3个参数的值 (该值可被修改)
	@about2start_sc_val4	该状态的第4个参数的值 (该值可被修改)

注意事项:
	若 @about2start_sc_rate 或 @about2start_sc_tick 被改写成 0 则视为执行中断
	若 @about2start_sc_tick 设为 -1 则表示无限时长

---------------------------------------

*OnPCUseOCIdentifyFilter:

当玩家使用一键鉴定道具时触发过滤器.

事件关联:
	关联到执行一键鉴定的玩家

中断关联:
	中断后服务端会无视玩家本次进行一键鉴定的请求

携带参数:
	@identify_idx	被玩家选择进行鉴定的道具背包序号

//============================================================
// 熊猫模拟器 - 实时事件
//============================================================
// 实时事件一旦触发会被立刻执行! 哪怕玩家正在和 NPC 对话,
// 也不会被压入事件队列暂缓执行.
// 
// 实时事件默认禁止使用[需要等待玩家进行后续动作]的指令:
// mes, next, close, close2, menu, select, prompt, input,
// openstorage, guildopenstorage, produce, cooking, birthpet,
// callshop, sleep, sleep2, openmail, openauction, progressbar,
// buyingstore, makerune, opendressroom, openstorage2
//
// 若您知道可能潜在的副作用且坚持需要使用上述任何一个指令,
// 可以使用 'unlockcmd' 脚本指令来解锁限制.
// 
// 任何实时事件触发时都将自动携带 @interrupt_npcid 参数,
// 作者可以通过 @interrupt_npcid 参数来获取当前实时事件触发时
// 玩家正在与哪个 NPC 对话 (游戏单位编号).
// 值为 0 表示没有打断玩家, 那你可以随意使用 mes 等指令.
//============================================================

*OnPCBuffStartExpress:

事件描述:
	当玩家成功获得一个状态(Buff)后触发实时事件

事件关联:
	关联到获得状态的玩家

携带参数:
	@started_sc_id		该状态的编号
	@started_sc_rate	该状态的触发概率(10000 = 100%)
	@started_sc_tick	该状态的持续时长(单位为毫秒)
						时长根据内部实现方式的不同, 有可能是指多长时间后剩余秒数减一
	@started_sc_val1	该状态的第1个参数的值
	@started_sc_val2	该状态的第2个参数的值
	@started_sc_val3	该状态的第3个参数的值
	@started_sc_val4	该状态的第4个参数的值

注意事项:
	若 @started_sc_tick 为 -1 则表示该状态无限时长

---------------------------------------

*OnPCBuffEndExpress:

事件描述:
	当玩家成功解除一个状态(Buff)后触发实时事件

事件关联:
	关联到解除状态的玩家

携带参数:
	@ended_sc_id		该状态的编号

---------------------------------------

*OnPCEnterMapExpress:

事件描述:
	当玩家进入或者改变地图时触发实时事件

事件关联:
	关联到进入或者改变地图的玩家

携带参数:
	@frommap_id		来源地图编号, 为 0 则表示玩家刚登录
	@frommap_name$	来源地图的名称
	@frommap_x		来源地图的起飞 x 坐标
	@frommap_y		来源地图的起飞 y 坐标
	
	@tomap_id		目标地图编号
	@tomap_name$    目标地图的名称
	@tomap_x		目标地图的落地 x 坐标
	@tomap_y		目标地图的落地 y 坐标

注意事项:
	当 @frommap_id 为 0 时, @frommap_name$ 为空字符串

---------------------------------------

*OnUnitFreeExpress:

事件描述:
	当游戏单位被销毁时触发实时事件

事件关联:
	不关联任何玩家

携带参数:
	$@unitfree_id		被销毁的游戏单位编号 (GameID)
	$@unitfree_type		被销毁的单位类型

		BL_PC    		= 0x001,	// 玩家单位
		BL_MOB   		= 0x002,	// 魔物单位
		BL_PET   		= 0x004,	// 宠物单位
		BL_HOM   		= 0x008,	// 人工生命体单位
		BL_MER   		= 0x010,	// 佣兵单位
		BL_ELEM  		= 0x200,	// 元素精灵单位
		
	$@unitfree_clrtype	销毁方式

		CLR_OUTSIGHT 	= 0,		// 淡出视野
		CLR_DEAD		= 1,		// 死亡
		CLR_RESPAWN		= 2,		// 重新生成
		CLR_TELEPORT	= 3,		// 瞬间移动
		CLR_TRICKDEAD	= 4,		// 装死
	
	$@unitfree_mapid	被销毁的单位所在的地图编号
	$@unitfree_mapname$	被销毁的单位所在的地图名称
	$@unitfree_x		被销毁的单位所在的 x 坐标
	$@unitfree_y		被销毁的单位所在的 y 坐标

注意事项:
	此事件的变量开头是 $@ 而不是 @, 请留意

---------------------------------------
