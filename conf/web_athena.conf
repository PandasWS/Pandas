//--------------------------------------------------------------
// 熊猫模拟器 - WEB 接口服务器配置文件
// 由熊猫模拟器开发团队翻译成中文并加以润色
//--------------------------------------------------------------
// 提示: 此配置文件中, 只要是以 // 作为开头的行, 都是注释信息. 
// 注释信息您可以随意修改, 不会干扰服务器的任何行为. 
//--------------------------------------------------------------

// WEB 接口服务器会监听来自这个 IP 地址的网卡信息
// 注意: 该选项允许你在有多个公网网卡(也意味着有多个公网 IP)的机器上, 
//       使用相同的"WEB 接口服务器端口"来开多个服. 
// 提醒: 若您想启用 bind_ip 选项的话, 记得去掉 bind_ip 前面的注释符: //,
//       否则服务器会忽略它, 导致配了和没配一样. 
//bind_ip: 127.0.0.1
 
// WEB 接口服务器端口 (默认端口为: 3000)
// 此端口会开放给游戏客户端用于建立 HTTP 请求
web_port: 3000

// 当自动转码不适用时, 将 UTF8 数据以什么样的编码进行保存?
// 
// 客户端与 WEB 接口服务器进行通讯的时候将会使用 UTF8 编码进行通讯,
// WEB 接口服务器内部会尝试将客户端发送来的信息转码成与数据库连接一致的编码.
// 
// 例如: 当您的 WEB 接口数据库的连接编码是 big5/gbk/utf8/utf8mb4 的时候,
// 程序将会自动把客户端发来的 UTF8 内容转换成 big5/gbk/utf8 编码然后存储到数据库中.
// 
// 但若您的 WEB 接口数据库连接编码是 latin1 的话, 那么程序无法进行编码转换工作,
// 因为将 UTF8 编码的信息转码成 latin1 之后将会导致信息丢失.
// 
// 您可以在这里指定如果碰到此类情况时, 
// 程序应该将 UTF8 内容转换成什么编码并存放到 latin1 编码的数据表中.
// 
// 注意: 这样的操作并不会导致数据丢失, 但可能会导致你的数据库管理软件 (例如: Navicat)
// 无法正确理解 latin1 表中存放的数据的真正编码, 这回导致通过管理软件查看数据的时候看到的中文是乱码.
// 通常可以修改管理软件的连接默认编码来解决问题.
//
// 但如果可以的话, 依然推荐您简体中文的服使用 gbk 编码建立数据库,
// 繁体中文的服使用 big5 编码建立数据库. 这样将会获得最大程度的自动转码支持.
//
// 提醒: 在正式开服之前一旦确定该选项的值, 那么请不要再进行更改.
// 除非您准备重新清空数据一切重新再来, 否则在已经产生历史数据后再改动此选项
// 会导致程序将无法再将之前保存的数据正确的转换成 UTF8 编码.
character_codepage: utf8

// 往控制台窗口中显示内容时, 在每行信息的前面加上时间戳. 
// 最终组成的时间最大长度不能超过 20 个字符.
//  
// 常用的时间格式有:
//    %I:%M:%S %p (小时:分钟:秒数 12小时制, 会携带AM或PM标记)
//    %H:%M:%S (小时:分钟:秒数, 24小时制)
//    %d/%b/%Y (日期/月份/年份)
// 更多的格式信息, 请参考 C 语言的 strftime 函数用法. 
// 
// rAthena 官方默认值是 [%d/%b %H:%M] 也就是24小时制的 [日/月 时:分]
// 这明显不符合国人习惯, 为此熊猫模拟器将其默认值改成了 [%Y/%m/%d %H:%M] 
// 
// 若想启用时间戳的话, 请将下面这一行头部的注释符//去掉
//timestamp_format: [%Y/%m/%d %H:%M] 

// 当服务端程序被一些启动器 (LeeStarter) 运行, 从而导致输出信息被重定向时, 
// 是否也将颜色代码一同输出? 
// 
// 问: 这里提到的重定向是指什么? 
// 答: 原本登录服务器的信息将直接显示到控制台窗口, 不过若使用一些启动工具
//     来启动登录服务器的话, 原本应该显示到控制台的信息, 就会被"劫持"到了
//     启动工具里面显示, 这种情况称之为"输出信息被重定向了"!
// 
// 问: 这里提到的颜色代码是指什么? 
// 答: 在我们查看控制台的过程中, 会发现类似 [Status] 的字是绿色的, 
//     而 [Error] 是红色的. 这是因为在程序往控制台输出信息时, 加入了一些
//     颜色编码的缘故. 比如, 若使用颜色编码 "\033[1;31m" 那么则表示接下来的
//     字符用红色输出. 其实有点类似我们脚本中使用的 ^xxxxxx 颜色代码. 
// 
// 此选项一般情况下推荐关闭, 因为基本没什么启动器支持着色
stdout_with_ansisequence: no

// 记录 WEB 接口服务器在控制台中产生的部分信息到 /log/ 目录中
// 首先您要确保熊猫模拟器的目录中有一个 log 文件夹, 没有的话必须手动创建, 
// 否则日志文件将不会产生.
// 
// 1: 记录控制台中以  [Warning] 开头的警告信息
// 2: 记录控制台中以  [Error]   开头的错误信息和数据库错误信息
// 4: 记录控制台中以  [Debug]   开头的调试信息
// 
// 例如: 想要记录 [Warning]、[Error]、[Debug] 开头的信息, 
//       只需要将1、2、4相加, 将 console_msg_log 设置为 7 即可 (1+2+4)! 
// 
// 日志信息的记录并不会被 console_silent 选项影响.
// 也就是说假如 console_msg_log 设置为 2 想记录 [Error] 信息,
// 而在 console_silent 中设置为 16 想隐藏 [Error] 信息,
// 此时系统将会隐藏 [Error] 信息不显示到控制台, 但与此同时会记录 [Error] 信息到日志中
console_msg_log: 0

// 将 WEB 接口服务器在控制台中产生的要记录的信息, 写到下面指定的日志文件中
console_log_filepath: ./log/web-msg_log.log

// 选择性隐藏 WEB 接口服务器控制台中显示出来的一些提示信息: 
// 1:  隐藏控制台中以  [Info]    开头的提示信息
// 2:  隐藏控制台中以  [Status]  开头的状态信息
// 4:  隐藏控制台中以  [Notice]  开头的注意信息
// 8:  隐藏控制台中以  [Warning] 开头的警告信息
// 16: 隐藏控制台中以  [Error]   开头的错误信息和数据库错误信息
// 32: 隐藏控制台中以  [Debug]   开头的调试信息
// 若您想同时隐藏多种信息, 只需要将其对应的数字相加即可
// 例如: 若您想要隐藏[Info]、[Status]、[Notice]开头的信息, 
//       那么只需要将1、2、4相加, 填写 7 即可 (1+2+4)
console_silent: 0

// 是否打印请求和响应信息?
// 每个 HTTP 会话接收到的请求和返回的响应都会被打印 (用于调试)
print_req_res: off

// 公会图标最多只能允许百分之多少的透明色像素点? (百分比选项)
// 若上传的公会图标中透明的部分超过设定的百分比, 那么会认为此图标无效.
emblem_transparency_limit: 80

// 是否允许使用 GIF 图片作为公会图标?
allow_gifs: yes

import: conf/import/web_conf.txt
